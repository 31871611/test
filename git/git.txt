安装完成后，还需要最后一步设置，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：
$ mkdir learngit		（创建文件夹，不能为中文）
$ cd learngit			（进入文件夹）
$ pwd				（显示当前目录）
/Users/michael/learngit


第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init			（把当前目录变成git仓库，要先进入这个目录）
Initialized empty Git repository in /Users/michael/learngit/.git/
$ ls -an			（查看文件夹中文件，包括隐藏文件）

$ git add readme.txt		（把文件添加到仓库，是先把文件放到仓库目录中）

$ git commit -m "wrote a readme file"	（把文件提交到仓库）
	     -m "这里是备注"		（加上-m是本次提交的说明）

$ git add file.txt file2.txt	（添加两个文件用空格分隔）
$ git commit -m "add 2 file"

$ git add *.py			（大量提交文件）
$ git status			（查看）
$ git reset HEAD 1.py		（排除一个文件）

$ git status			（可以让我们时刻掌握仓库当前的状态，在把文件添加、修改后使用查看）
$ git diff			（查看文件差异，修改了什么）
$ git log			（显示从最近到最远的提交日志）
	  --pretty=oneline	（可以看到commit id版本号）

$ git reset --hard HEAD^	（回退所用内容到上一个版本，用HEAD表示当前版本就是最新的提交，上一个版本就是HEAD^，上上一个版本就是HEAD^^
）
$ git reset --hard 3628164	（回退到某个版本，需要版本号）

$ git reflog			（记录每一次命令）

$ git checkout -- readme.tx	（丢弃工作区的修改）总之，就是让这个文件回到最近一次git commit或git add时的状态。
$ git reset HEAD readme.txt	（把暂存区的修改撤销掉）

$ rm test.txt			（删除文件，linux命令，或者进入目录右键删除）
$ git rm test.txt		（从版本库中删除该文件）
$ git rm -r 文件夹       （删除目录）


工作区	比如：learngit文件夹
暂存区	add后
版本区	.git（本地）
master	分支


/* 远程仓库GitHub */

创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
.ssh目录，里面有id_rsa和id_rsa.pub两个文件，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥


添加远程库
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000

一个上传流程
$ git add file.txt
$ git add --a  		将所有改动提交到缓存（注意是两个杠）
$ git commit -m "file.txt"		（先提交到本地版本库）
$ git push origin master		（远程版本库）

从远程库克隆
$ git clone git@github.com:michaelliao/gitskills.git		（git clone克隆一个本地库，把Git库的地址换成你自己的，默认的git://使用ssh）
$ git clone git@github.com:username/xxxx.git			（这个需要添加id_rsa.pub）
	    https://github.com/michaelliao/gitskills.git	（也可以使用https）
$ git remote 		（查看远程库列出已经存在的远程分支）


创建与合并分支
$ git checkout -b dev			（创建dev分支，然后切换到dev分支）
		-b			（参数表示创建并切换，相当于以下两条命令）
$ git branch dev			（创建分支）
$ git checkout dev			（切换分支）
$ git branch				（列出所有分支，当前分支前会标一个*号）
$ git branch -a				（加上-a参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）
$ git push origin --delete <branchName> （删除远程分支）
$ git add readme.txt			（这时在dev分支上修改个文件后提交）
$ git checkout master			（切换到master分支）
$ git merge dev				（合并指定分支到当前分支（带*号的以先切换到master分支），把dev分支的工作成果合并到master分支上）
$ git branch -d dev			（合并完成后，就可以删除dev分支）
$ git pull                               (抓取到本地)
$ git pull origin master
$ git remote -v				查看远程库信息
$ git config --list 			查看配置信息

多人协作
$ git checkout -b dev origin/dev	要在dev分支上开发，就必须创建远程origin的dev分支到本地
$ git push origin dev 			把dev分支push到远程，当你想要在你的分支上提交内容，请确保是在你的那个分支上。
$ git push origin :dev                  在github远程端删除一个分支：(分支名前的冒号代表删除)

指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
$ git branch --set-upstream-to origin/dev dev


拉取远程分支并创建本地分支
git fetch origin 远程分支名x:本地分支名x
使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。


/********************************************************/

假设一开始你的本地和远程都是：

a -> b -> c

你想把HEAD回退到b，那么在本地就变成了：

a -> b

这个时候，如果没有远程库，你就接着怎么操作都行，比如：

a -> b -> d

但是在有远程库的情况下，你push会失败，因为远程库是 a->b->c，你的是 a->b->d


两种方案：

1.push的时候用--force，强制把远程库变成a -> b -> d，大部分公司严禁这么干，会被别人揍一顿。
git push origin dev --force

2.做一个反向操作，把自己本地变成a -> b -> c -> d，注意b和d文件快照内容一莫一样，但是commit id肯定不同，再push上去远程也会变成 a -> b -> c -> d。
使用 git revert <commit_id>操作实现以退为进，
git revert 不同于 git reset  它不会擦除"回退"之后的 commit_id ,而是正常的当做一次"commit"，产生一次新的操作记录，所以可以push，不会让你再pull
a -> b -> c
git revert c#id，消除c的提交回到b状态
git revert b#id，消除b的提交回到a状态，会冲突
一步一步从c到b才不会冲突

/********************************************************/




不知道什么意思
git branch --set-upstream-to=origin/master master 
git branch --set-upstream-to=origin/ThirdParty ThirdParty
git config --global push.default matching


http://www.ithao123.cn/content-5320328.html


错误

Invalid username or password
答：帐号不用输入@后的信息

添加key文件时提示：Key is already in use
输入ssh -T -i ~/.ssh/id_rsa git@github.com查看哪一个账户在使用此密钥后删除
搜索github多个帐号

ssh-add时提示：Could not open a connection to your authentication agent.


